# Makefile include for static lib
# c 2012 Frustum Interactive
#  c 2012 Roger Dass

SOURCEDIR?=src
TOPDIR?=../..
INCDIR+=-I../ -I./include -I/usr/include
LIBDIR+=-L/usr/lib

CC=gcc
CXX=g++
CCFLAGS+=$(INCDIR) -Wall
CXXFLAGS+=-std=c++11 $(EXTRACXXFLAGS)
OBJCFLAGS+=$(INCDIR) -fmodules
OBJCXXFLAGS+=$(INCDIR) $(CXXFLAGS) -fmodules
LDFLAGS+=$(LIBDIR)
INFLAGS?=
DEFINES?=

LIBS=$(LIBS_LINUX)

### Tool / OS specific substitutions
RM=rm -rf
CP=cp -f
SLASH=/
CMDSEP=;

### Operating system specific defines, etc.
ifeq ($(OS),Windows_NT)
    DEFINES += -DWIN32 $(CXXFLAGS_WIN)
    ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
        DEFINES += -DAMD64
    endif
    ifeq ($(PROCESSOR_ARCHITECTURE),x86)
        DEFINES += -DIA32
    endif

	LIBS=$(LIBS_W32)
	CLEAN_TARGET=$(TARGET)
	C_FILES += $(C_FILES_WIN)
	CXX_FILES += $(CXX_FILES_WIN)
	INCDIR +=\
		-I$(TOPDIR)/extern/glew-1.13.0/include
	LIBDIR +=\
		-L$(TOPDIR)/extern/glew-1.13.0/lib/release/win32
	DEPTEMP := $(DEP_WIN32)
	DEPTEMP += $(DEPENDENCIES)
	DEPENDENCIES := $(DEPTEMP)
	
ifndef BASH_EMU
	DEPENDENCIES := $(subst /,\\, $(DEPENDENCIES))
	RM=del /F /Q
	CP=copy
	SLASH=\\
	CMDSEP=&
endif

else
	UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
		DEFINES += -DLINUX $(CXXFLAGS_LINUX)
		C_FILES += $(C_FILES_LINUX)
		CXX_FILES += $(CXX_FILES_LINUX)
		LIBDIR+=-L/usr/lib/x86-linux-gnu
		DEPENDENCIES += $(DEP_LINUX)
		OBJCXXFLAGS =
		OBJCXX_FILES = 
    endif

	ifeq ($(UNAME_S),Darwin)
		LIBS=$(LIBS_OSX)
		DEFINES += -DOSX $(CXXFLAGS_OSX)
		C_FILES += $(C_FILES_OSX)
		CXX_FILES += $(CXX_FILES_OSX)
		OBJC_FILES += $(OBJC_FILES_OSX)
		OBJCXX_FILES += $(OBJCXX_FILES_OSX)
		LIBDIR+=
		DEPENDENCIES += $(DEP_OSX)
    endif
	UNAME_P := $(shell uname -p)
    ifeq ($(UNAME_P),x86_64)
		DEFINES += -DAMD64
    endif
    ifneq ($(filter %86,$(UNAME_P)),)
		DEFINES += -DIA32
    endif
    ifneq ($(filter arm%,$(UNAME_P)),)
		DEFINES += -DARM
    endif
endif

ifdef DEBUG
	CXXFLAGS += -g
	DEFINES += -D_DEBUG
endif

ifdef debug
	CXXFLAGS += -g
	DEFINES += -D_DEBUG
endif


### Set path for output object files
OUTDIR=build
OBJDIR=$(OUTDIR)/obj
OBJECTS=$(patsubst %, $(OBJDIR)/%, $(C_FILES:.c=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(CXX_FILES:.cpp=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(OBJC_FILES:.m=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(OBJCXX_FILES:.mm=.o))
		
all: init $(TARGET) finish


$(OBJDIR)/%.o: $(SOURCEDIR)/%.c
	@echo ""
	@echo " Compile:"
	mkdir -p $(dir $@)
	$(CXX) $(CCFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.cpp
	@echo ""
	@echo " Compile:"
	mkdir -p $(dir $@)
	$(CXX) $(CCFLAGS) $(CXXFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.m
	@echo ""
	@echo " Compile:"
	mkdir -p $(dir $@)
	$(CXX) $(OBJCFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.mm
	@echo ""
	@echo " Compile:"
	mkdir -p $(dir $@)
	$(CXX) $(OBJCXXFLAGS) $(DEFINES) -c -o $@ $<

$(TARGET): $(OBJECTS)
	@echo ""
	@echo " Building static library:"
	ar rcs $(OUTDIR)/$@ $^

init:
	@echo ""
	@echo "*************************************"
	@echo "	Building: $(TARGET)"
	@echo "*************************************"
	@echo ""
	@echo " Executing post build clean commands..."
	@$(POSTBUILDCLEAN)
	
finish: 
	@echo ""
	@echo " Copying library:"
	$(CP) $(OUTDIR)$(SLASH)$(TARGET) $(TOPDIR)$(SLASH)lib
	@echo ""
	$(POSTBUILD)
	@echo ""
	@echo "Build completed."
	@echo ""

.PHONY: clean

clean:
	$(RM) $(CLEAN_TARGET)
	$(RM) $(OUTDIR)
	$(RM) core.*
	$(RM) include$(SLASH)*
	$(RM) src$(SLASH)moc_*
	$(RM) $(TOPDIR)$(SLASH)lib$(SLASH)$(TARGET)
	$(POSTBUILDCLEAN)

