SOURCEDIR?=src
TOPDIR?=../..
INCDIR+=-I./include -I/usr/include -I$(TOPDIR)/projects -I$(TOPDIR)/extern
LIBDIR+=-L/usr/lib

CXX=g++
CXXFLAGS+=$(INCDIR) -Wall -std=c++17 $(EXTRACXXFLAGS)
OBJCFLAGS+=$(INCDIR) -fmodules
OBJCXXFLAGS+=$(INCDIR) -std=c++17 -fmodules $(EXTRACXXFLAGS)
LDFLAGS+=$(LIBDIR)
INFLAGS?=
DEFINES?=

LIBS=$(LIBS_LINUX)

RESOURCES?=

### Tool / OS specific substitutions
RM=rm -f
CP=cp
SLASH=/
CMDSEP=;

### Operating system specific defines, etc.
ifeq ($(OS),Windows_NT)
    DEFINES += -DWIN32
    ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
        DEFINES += -DAMD64
    endif
    ifeq ($(PROCESSOR_ARCHITECTURE),x86)
        DEFINES += -DIA32
    endif

	LIBS=$(LIBS_W32)
	CLEAN_TARGET=$(TARGET).exe
	C_FILES += $(C_FILES_WIN)
	CXX_FILES += $(CXX_FILES_WIN)
	INCDIR +=\
		-I$(TOPDIR)/extern/glew-1.13.0/include
    LIBDIR +=\
		-L$(TOPDIR)/extern/glew-1.13.0/lib/release/win32
	DEPTEMP := $(DEP_WIN32)
	DEPTEMP += $(DEPENDENCIES)
	DEPENDENCIES := $(DEPTEMP)
	
ifndef BASH_EMU
	DEPENDENCIES := $(subst /,\\, $(DEPENDENCIES))
	RM=del /F /Q
	CP=copy
	SLASH=\\
	CMDSEP=&
endif

else
	UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
		DEFINES += -DLINUX
		C_FILES += $(C_FILES_LINUX)
		CXX_FILES += $(CXX_FILES_LINUX)
		LIBDIR+=-L/usr/lib/x86-linux-gnu
		DEPENDENCIES += $(DEP_LINUX)
    endif

	ifeq ($(UNAME_S),Darwin)
		LIBS=$(LIBS_OSX)
		DEFINES += -DOSX
		C_FILES += $(C_FILES_OSX)
		CXX_FILES += $(CXX_FILES_OSX)
		OBJC_FILES += $(OBJC_FILES_OSX)
		OBJCXX_FILES += $(OBJCXX_FILES_OSX)
		LIBDIR+=
		DEPENDENCIES += $(DEP_OSX)
		# include recipe text to make .app package
		include $(TOPDIR)/templates/Makefile_include_osx
    endif
	UNAME_P := $(shell uname -p)
    ifeq ($(UNAME_P),x86_64)
		DEFINES += -DAMD64
    endif
    ifneq ($(filter %86,$(UNAME_P)),)
		DEFINES += -DIA32
    endif
    ifneq ($(filter arm%,$(UNAME_P)),)
		DEFINES += -DARM
    endif
endif

ifdef DEBUG
	CXXFLAGS += -g
	DEFINES += -D_DEBUG
endif

ifdef debug
	CXXFLAGS += -g
	DEFINES += -D_DEBUG
endif

### Set path for output object files
OBJDIR=obj
OBJECTS=$(patsubst %, $(OBJDIR)/%, $(C_FILES:.c=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(CXX_FILES:.cpp=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(OBJC_FILES:.m=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(OBJCXX_FILES:.mm=.o))


### add include & lib path from dependencies
INCDIR+=$(patsubst %, -I%/inc, $(DEPENDENCIES))
LIBDIR+=$(patsubst %, -L%/lib, $(DEPENDENCIES))

		
all: dependencies init $(TARGET) finish

debug: CXXFLAGS += -g
debug: DEFINES += -D_DEBUG
debug: dependencies init $(TARGET) finish

release: CXXFLAGS += -O2
release: dependencies init $(TARGET) finish


$(OBJDIR)/%.o: $(SOURCEDIR)/%.c
	@echo ""
	@echo " Compile:"				
	$(CXX) $(CXXFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.cpp
	@echo ""
	@echo " Compile:"				
	$(CXX) $(CXXFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.m
	@echo ""
	@echo " Compile:"				
	$(CXX) $(OBJCFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.mm
	@echo ""
	@echo " Compile:"				
	$(CXX) $(OBJCXXFLAGS) $(DEFINES) -c -o $@ $<

$(TARGET): $(OBJECTS)
	@echo ""
	@echo " Link:"
	$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)

dependencies: $(DEPENDENCIES)
	@echo ""
	@echo " Building prerequesite project: $^"
	$(foreach x, $^, $(MAKE) -C $(x)$(CMDSEP))

init:
	@echo ""
	@echo "*************************************"
	@echo "	Building: $(TARGET)"
	@echo "*************************************"
	@echo ""
	@echo " Executing post build clean commands..."
	@$(POSTBUILDCLEAN)
	
finish: 
	@echo ""
	@echo " Executing post build commands..."
	@$(POSTBUILD)
	@echo ""
	@echo "*Build completed.*"
	@echo ""

.PHONY: clean

deepclean: $(DEPENDENCIES) clean
	$(foreach x, $(DEPENDENCIES), $(MAKE) -C $(x) clean$(CMDSEP)) 

clean:
	$(RM) $(CLEAN_TARGET)
	$(RM) $(OBJDIR)$(SLASH)*.o
	$(RM) core.*
	$(RM) include$(SLASH)*
	$(RM) src$(SLASH)moc_*
	$(POSTBUILDCLEAN)
