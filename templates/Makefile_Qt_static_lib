# Makefile for making a static LIB
#  
#

INCDIR=-I./include -I/usr/include -I../../include
LIBDIR= -L/usr/lib -L/usr/lib/x86-linux-gnu -L/usr/lib/fglrx
CXX=g++
CXXFLAGS=$(INCDIR) -Wall -std=c++0x
OBJCFLAGS=$(INCDIR)
LDFLAGS=$(LIBDIR) -static-libgcc -static-libstdc++

LIBS_LINUX=
LIBS_W32=
LIBS_OSX=

LIBS=$(LIBS_LINUX)

SOURCEDIR=src
TOPDIR=.

### Input Source Files
C_FILES=
CXX_FILES=
OBJC_FILES=
OBJCXX_FILES=

### Tool / OS specific substitutions
UIDIR=ui
RESOURCEDIR=.
UIC=uic
MOC=moc
RCC=rcc
RM=rm -f
CP=cp
SLASH=/
CMDSEP=;

### Targets / Output
TARGET=libgfxScene.a
CLEAN_TARGET=$(TARGET)

### Operating system specific defines, etc.
ifeq ($(OS),Windows_NT)
    CXXFLAGS += -D WIN32
    ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
        CCFLAGS += -D AMD64
    endif
    ifeq ($(PROCESSOR_ARCHITECTURE),x86)
        CCFLAGS += -D IA32
    endif

    LIBS=$(LIBS_W32)
    CLEAN_TARGET=$(TARGET)
    INCDIR +=
    LIBDIR +=
    CXX_FILES +=

ifndef BASH_EMU
    RM=del /F /Q
    CP=copy
    SLASH=\\
    CMDSEP=&
endif

else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
	CXXFLAGS += -D LINUX
	CXX_FILES +=
    endif
    ifeq ($(UNAME_S),Darwin)
	LIBS=$(LIBS_OSX)
	CXXFLAGS += -D OSX
	CXX_FILES +=
	OBJC_FILES +=
	OBJCXX_FILES +=
    endif
    UNAME_P := $(shell uname -p)
    ifeq ($(UNAME_P),x86_64)
        CXXFLAGS += -D AMD64
    endif
    ifneq ($(filter %86,$(UNAME_P)),)
        CXXFLAGS += -D IA32
    endif
    ifneq ($(filter arm%,$(UNAME_P)),)
        CXXFLAGS += -D ARM
    endif
endif

### QT specific stuff 
# Enter files that need to have moc generated here
HEADER_FILES=

# Resources	
RESOURCES=

# Auto-generated by Qt
INCLUDE=$(patsubst %, $(SOURCEDIR)/%, $(HEADER_FILES))
QRC=$(patsubst $(RESOURCEDIR)/%, $(SOURCEDIR)/%, $(RESOURCES))
RCCS=$(QRC:.qrc=.rcc)
GENERATED_FILES=$(RCCS:.rcc=.cpp)
CXX_FILES+=$(GENERATED_FILES)


### Set path for output object files
OBJDIR=obj
OBJECTS=$(patsubst %, $(OBJDIR)/%, $(C_FILES:.c=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(CXX_FILES:.cpp=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(OBJC_FILES:.m=.o))
OBJECTS+=$(patsubst %, $(OBJDIR)/%, $(OBJCXX_FILES:.mm=.o))
		
all: init $(TARGET) finish

$(OBJDIR)/%.o: $(SOURCEDIR)/%.c
	@echo ""
	@echo " Compile:"				
	$(CXX) $(CXXFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.cpp
	@echo ""
	@echo " Compile:"				
	$(CXX) $(CXXFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.m
	@echo ""
	@echo " Compile:"				
	$(CXX) $(OBJCFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: $(SOURCEDIR)/%.mm
	@echo ""
	@echo " Compile:"				
	$(CXX) $(OBJCFLAGS) -c -o $@ $<

moc_%.cpp: %.h
	@echo " Generating MOC file:"
	$(MOC) $< -o $@

$(TARGET): $(OBJECTS)
	@echo ""
	@echo " Building Library:"
	@#$(CXX) $(LDFLAGS) -shared -o $@ $^ $(LIBS)
	ar rcs $@ $^ 

init: $(RCCS)
	@echo ""
	@echo "*************************************************"
	@echo "		Building: $(TARGET)		"
	@echo "*************************************************"
	@#echo "Generating header from QTDesigner UI file..."
	@#$(UIC) -o include/UIMainWindow.h $(UIDIR)/mainWindow.ui" 

%.rcc: $(RESOURCEDIR)/%.qrc
	@echo ""
	@echo " Generating Resource file:"
	$(RCC) $< -name $(<:.qrc=) -o $(patsubst %, $(SOURCEDIR)/%, $(<:.qrc=.cpp))
	
finish:
	@echo ""
	@echo " Copying files:"
	$(CP) $(TARGET) ..$(SLASH)..$(SLASH)lib
	@echo ""
	@echo "*Build completed.*"
	@echo ""


.PHONY: clean

clean:
	$(RM) $(CLEAN_TARGET)
	$(RM) $(OBJDIR)$(SLASH)*.o
	$(RM) core.*
	$(RM) include$(SLASH)*
	$(RM) src$(SLASH)moc_*
	$(RM) ..$(SLASH)..$(SLASH)lib$(SLASH)$(TARGET)
	$(foreach x, $(GENERATED_FILES), $(RM) src$(SLASH)$(x)$(CMDSEP))